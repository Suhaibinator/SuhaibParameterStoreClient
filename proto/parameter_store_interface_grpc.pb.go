// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package parameterstore

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ParameterStoreClient is the client API for ParameterStore service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ParameterStoreClient interface {
	Store(ctx context.Context, in *StoreRequest, opts ...grpc.CallOption) (*StoreResponse, error)
	Retrieve(ctx context.Context, in *RetrieveRequest, opts ...grpc.CallOption) (*RetrieveResponse, error)
	AddAccess(ctx context.Context, in *AddAccessRequest, opts ...grpc.CallOption) (*AddAccessResponse, error)
}

type parameterStoreClient struct {
	cc grpc.ClientConnInterface
}

func NewParameterStoreClient(cc grpc.ClientConnInterface) ParameterStoreClient {
	return &parameterStoreClient{cc}
}

func (c *parameterStoreClient) Store(ctx context.Context, in *StoreRequest, opts ...grpc.CallOption) (*StoreResponse, error) {
	out := new(StoreResponse)
	err := c.cc.Invoke(ctx, "/parameterstore.ParameterStore/Store", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *parameterStoreClient) Retrieve(ctx context.Context, in *RetrieveRequest, opts ...grpc.CallOption) (*RetrieveResponse, error) {
	out := new(RetrieveResponse)
	err := c.cc.Invoke(ctx, "/parameterstore.ParameterStore/Retrieve", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *parameterStoreClient) AddAccess(ctx context.Context, in *AddAccessRequest, opts ...grpc.CallOption) (*AddAccessResponse, error) {
	out := new(AddAccessResponse)
	err := c.cc.Invoke(ctx, "/parameterstore.ParameterStore/AddAccess", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ParameterStoreServer is the server API for ParameterStore service.
// All implementations must embed UnimplementedParameterStoreServer
// for forward compatibility
type ParameterStoreServer interface {
	Store(context.Context, *StoreRequest) (*StoreResponse, error)
	Retrieve(context.Context, *RetrieveRequest) (*RetrieveResponse, error)
	AddAccess(context.Context, *AddAccessRequest) (*AddAccessResponse, error)
	mustEmbedUnimplementedParameterStoreServer()
}

// UnimplementedParameterStoreServer must be embedded to have forward compatible implementations.
type UnimplementedParameterStoreServer struct {
}

func (UnimplementedParameterStoreServer) Store(context.Context, *StoreRequest) (*StoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Store not implemented")
}
func (UnimplementedParameterStoreServer) Retrieve(context.Context, *RetrieveRequest) (*RetrieveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Retrieve not implemented")
}
func (UnimplementedParameterStoreServer) AddAccess(context.Context, *AddAccessRequest) (*AddAccessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAccess not implemented")
}
func (UnimplementedParameterStoreServer) mustEmbedUnimplementedParameterStoreServer() {}

// UnsafeParameterStoreServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ParameterStoreServer will
// result in compilation errors.
type UnsafeParameterStoreServer interface {
	mustEmbedUnimplementedParameterStoreServer()
}

func RegisterParameterStoreServer(s grpc.ServiceRegistrar, srv ParameterStoreServer) {
	s.RegisterService(&ParameterStore_ServiceDesc, srv)
}

func _ParameterStore_Store_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParameterStoreServer).Store(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/parameterstore.ParameterStore/Store",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParameterStoreServer).Store(ctx, req.(*StoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ParameterStore_Retrieve_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParameterStoreServer).Retrieve(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/parameterstore.ParameterStore/Retrieve",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParameterStoreServer).Retrieve(ctx, req.(*RetrieveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ParameterStore_AddAccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddAccessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParameterStoreServer).AddAccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/parameterstore.ParameterStore/AddAccess",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParameterStoreServer).AddAccess(ctx, req.(*AddAccessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ParameterStore_ServiceDesc is the grpc.ServiceDesc for ParameterStore service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ParameterStore_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "parameterstore.ParameterStore",
	HandlerType: (*ParameterStoreServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Store",
			Handler:    _ParameterStore_Store_Handler,
		},
		{
			MethodName: "Retrieve",
			Handler:    _ParameterStore_Retrieve_Handler,
		},
		{
			MethodName: "AddAccess",
			Handler:    _ParameterStore_AddAccess_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ParameterStoreClient/proto/parameter_store_interface.proto",
}
